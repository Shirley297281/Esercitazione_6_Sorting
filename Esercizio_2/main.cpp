/*
    In these code, I compared sorting time of different sorting algorithms
    (bubble sort and merge sort)
    on various input vectors all of the same lenght:
        - iota method to generate ordered vector from a beginning number
        - generate to generate decreasing vector
        - perturbate randomly a vector
        - vector of double
        - total random vector generated by mt19937_64 :-> 64-bit Mersenne Twister by Matsumoto and Nishimura, 2000
*/

#include <iostream>
#include <chrono> //for counting time
#include <unistd.h>
#include <vector>
#include <numeric> //per iota
#include <algorithm> //per generate
#include <random> //per mt19937_64
#include "SortingAlgorithm.hpp"
using namespace SortLibrary;
using namespace std;


//input da linea di comando: argc Ã¨ necessario per avere un int come primo parametro
int main(int argc, char **argv)
{

    cout << "argument read = dimension of vectors: \t" <<argv[1] << endl;
    //vector lenght as argument input
    int n = stoi(argv[1]);

    vector <int> iot(n);


    //VECTORS

    //iota
    iota(iot.begin(), iot.end(),23);
    cout << "\nvector by iota: ";
    for (int i = 0; i<5; i++)
        cout << iot[i]<< " ";
    cout <<"... "<< iot[n-1] <<endl;

    //generate function: vettore decrescente
    vector <int> gen(n);
    int b=10;
    generate(gen.begin(), gen.end(), [&b] () {return b--;});
    cout << "\nvector by generate: ";
    for (int i = 0; i<20; i++)
        cout << gen[i]<< " ";
    cout <<"... "<< gen[n-1] <<endl;


    //PERTURBARE IN MANIERA RANDOMICA n/2 ELEMENTI
    vector <int> iotp = iot;
    for (int i=0; i<n/2; i=i+2)
    {
        iotp[i] = rand() % 300;
    }
    cout << "\niota perturbated vector: ";
    for (int i = 0; i<20; i++)
        cout << iotp[i]<< " ";
    cout <<"... "<< iotp[n-1] <<endl;


    //random vector of double
    vector <double> drand(n);
    for (int i=0; i<n; i=i+2)
        drand[i]=double (rand());

    cout << "\nrandom vector of double: ";
    for (int i = 0; i<5; i++)
        cout << drand[i]<< " ";
    cout <<"... "<< drand[n-1] <<endl;

    //random vector with fantastic function implemented in 2000
    ///necessary to use mt19937_64
    random_device rd;
    mt19937_64 generatore(rd()); // Use mt19937_64 for 64-bit random numbers
    uniform_int_distribution<int> dis(-500, 1024); // Distribution for integer values between 1 and 1000
    ///
    // Create a vector of integer values
    vector<int> nish;
    for (int i = 0; i < n; ++i) {
        nish.push_back(dis(generatore));
    }

    cout << "\nrandom vector with mt19937_64: ";
    for (int i = 0; i<20; i++)
        cout << nish[i]<< " ";
    cout <<"... "<< nish[n-1] <<endl;




    //////////////////
    ///ORDINAMENTO////
    //////////////////

    ////
    ///BUBBLESORT
    cout<<"\n--BUBBLE SORT method" <<endl;
    double sum_bubble=0;

    /// iota
    vector <int> copyiot = iot;
    double durationTOT=0;
    for (int m=0; m<1000;m++){
        std::chrono::steady_clock::time_point t_begin= chrono::steady_clock::now();
        BubbleSort(copyiot);
        std::chrono::steady_clock::time_point t_end= chrono::steady_clock::now();
        double duration = chrono::duration_cast<chrono::microseconds>(t_end - t_begin).count();
        // cout<<"\n"<<m<<"\tiota vector__ elapsed time: "<<duration<<" microseconds\n" <<endl;

        //cout<<"iota perturbated vector ordinated by bubblesort: ";

        //for (int i = 0; i<n; i++)
        // cout << iot[i]<< " ";
        // cout <<endl;
        copyiot = iot;
        durationTOT += duration;

    }
    sum_bubble+=durationTOT/1000;
    cout<<"\n\tiota vector__ mean of 1000 elapsed time: "<<durationTOT/1000<<" microseconds\n" <<endl;

    ///gen
    vector <int> copygen = gen;
    durationTOT=0;

    for (int m=0; m<1000;m++){
        std::chrono::steady_clock::time_point t2_begin= chrono::steady_clock::now();
        BubbleSort(copygen);
        std::chrono::steady_clock::time_point t2_end= chrono::steady_clock::now();
        double duration2 = chrono::duration_cast<chrono::microseconds>(t2_end - t2_begin).count();
        durationTOT += duration2;
        copygen = gen;
    }
    cout<<"\n\tgenerate vector__ elapsed time: "<<durationTOT/1000<<" microseconds\n" <<endl;
    sum_bubble+=durationTOT/1000;

    /// iota perturbated
    vector <int> copyiotp = iotp;
    durationTOT=0;

    for (int m=0; m<1000;m++){
        std::chrono::steady_clock::time_point t_beginp= chrono::steady_clock::now();
        BubbleSort(copyiotp);
        std::chrono::steady_clock::time_point t_endp= chrono::steady_clock::now();
        double durationp = chrono::duration_cast<chrono::microseconds>(t_endp - t_beginp).count();
        durationTOT += durationp;
        copyiotp = iotp;
    }
    cout<<"\n\tiota perturbated vector__ elapsed time: "<<durationTOT/1000<<" microseconds\n" <<endl;
    sum_bubble+=durationTOT/1000;

    ///drand
    vector <double> copydrand=drand;
    durationTOT = 0;
    for (int m=0;m<1000;m++){
        std::chrono::steady_clock::time_point tr_begin= chrono::steady_clock::now();
        BubbleSort(copydrand);
        std::chrono::steady_clock::time_point tr_end= chrono::steady_clock::now();
        double durationr = chrono::duration_cast<chrono::microseconds>(tr_end - tr_begin).count();
        durationTOT += durationr;
        copydrand = drand;
    }

    cout<<"\n\trandom vector of double__ elapsed time: "<<durationTOT/1000<<" microseconds\n" <<endl;
    sum_bubble+=durationTOT/1000;

    ///nish
    vector <int> copynish=nish;
    durationTOT = 0;
    for (int m=0;m<1000;m++){
        std::chrono::steady_clock::time_point tn_begin= chrono::steady_clock::now();
        BubbleSort(copynish);
        std::chrono::steady_clock::time_point tn_end= chrono::steady_clock::now();
        double durationn = chrono::duration_cast<chrono::microseconds>(tn_end - tn_begin).count();
        durationTOT+=durationn;
        copynish=nish;
    }
    cout<<"\n\trandom vector (mt19937_64)__ elapsed time: "<<durationTOT/1000<<" microseconds\n" <<endl;
    sum_bubble+=durationTOT/1000;

    cout<<"\nMean of times elapsed for BubbleSort = "<<sum_bubble/5<<" microseconds";

    ////
    ///MERGESORT
    cout<<"\n\n--MERGESORT method"<<endl;
    double sum_merge=0;

    /// iota

    durationTOT = 0;

    for (int m=0;m<1000;m++){
        std::chrono::steady_clock::time_point t3_begin= chrono::steady_clock::now();
        MergeSort(copyiot);
        std::chrono::steady_clock::time_point t3_end= chrono::steady_clock::now();
        double duration3 = chrono::duration_cast<chrono::microseconds>(t3_end - t3_begin).count();
        durationTOT+=duration3;
        copyiot=iot;
    }
    cout<<"\n\tiota vector__ elapsed time: "<<durationTOT/1000<<" microseconds\n" <<endl;
    sum_merge+=durationTOT/1000;

    ///gen
    durationTOT = 0;

    for (int m=0;m<1000;m++){
        std::chrono::steady_clock::time_point t4_begin= chrono::steady_clock::now();
        MergeSort(copygen);
        std::chrono::steady_clock::time_point t4_end= chrono::steady_clock::now();
        double duration4 = chrono::duration_cast<chrono::microseconds>(t4_end - t4_begin).count();
        durationTOT+=duration4;
        copygen=gen;
    }
    cout<<"\n\tgenerate vector__ elapsed time: "<<durationTOT/1000<<" microseconds\n" <<endl;
    sum_merge+=durationTOT/1000;


    /// iota perturbated
    durationTOT = 0;

    for (int m=0;m<1000;m++){
        std::chrono::steady_clock::time_point t3_beginp= chrono::steady_clock::now();
        MergeSort(copyiotp);
        std::chrono::steady_clock::time_point t3_endp= chrono::steady_clock::now();
        double duration3p = chrono::duration_cast<chrono::microseconds>(t3_endp - t3_beginp).count();
        durationTOT+=duration3p;
        copyiotp=iotp;
    }
    cout<<"\n\tiota perturbated vector__ elapsed time: "<<durationTOT/1000<<" microseconds\n" <<endl;
    sum_merge+=durationTOT/1000;



    ///drand
    durationTOT = 0;

    for (int m=0;m<1000;m++){
        std::chrono::steady_clock::time_point tr1_begin= chrono::steady_clock::now();
        MergeSort(copydrand);
        std::chrono::steady_clock::time_point tr1_end= chrono::steady_clock::now();
        double durationr1 = chrono::duration_cast<chrono::microseconds>(tr1_end - tr1_begin).count();
        durationTOT+=durationr1;
        copydrand=drand;
    }
    cout<<"\n\trandom vector of double__ elapsed time: "<<durationTOT/1000<<" microseconds\n" <<endl;
    sum_merge+=durationTOT/1000;



    ///nish
    durationTOT = 0;

    for (int m=0;m<1000;m++){
        std::chrono::steady_clock::time_point tn1_begin= chrono::steady_clock::now();
        MergeSort(nish);
        std::chrono::steady_clock::time_point tn1_end= chrono::steady_clock::now();
        double durationn1 = chrono::duration_cast<chrono::microseconds>(tn1_end - tn1_begin).count();
        durationTOT+=durationn1;
        copynish=nish;
    }
    cout<<"\n\trandom vector (mt19937_64)__ elapsed time: "<<durationTOT/1000<<" microseconds\n" <<endl;
    sum_merge+=durationTOT/1000;


    cout<<"\nMean of times elapsed for MergeSort = "<<sum_merge/5<<" microseconds"<<endl;


    if(sum_bubble>sum_merge){
        cout<<"\n\nFor these types of vectors, MergeSort is better than BubbleSort.\n BubbleSort is good for small vectors an for ordinated ones."<<endl;
    }
    else{
        cout<<"\n\nFor these types of vectors, BubbleSort is better than MergeSort.\n MergeSort is good for larger vectors."<<endl;
    }


    return 0;
}
